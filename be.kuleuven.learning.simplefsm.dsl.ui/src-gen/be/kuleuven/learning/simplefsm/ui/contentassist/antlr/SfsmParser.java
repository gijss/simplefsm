/*
* generated by Xtext
*/
package be.kuleuven.learning.simplefsm.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import be.kuleuven.learning.simplefsm.services.SfsmGrammarAccess;

public class SfsmParser extends AbstractContentAssistParser {
	
	@Inject
	private SfsmGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected be.kuleuven.learning.simplefsm.ui.contentassist.antlr.internal.InternalSfsmParser createParser() {
		be.kuleuven.learning.simplefsm.ui.contentassist.antlr.internal.InternalSfsmParser result = new be.kuleuven.learning.simplefsm.ui.contentassist.antlr.internal.InternalSfsmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSimpleFiniteStateMachineAccess().getGroup(), "rule__SimpleFiniteStateMachine__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getSimpleFiniteStateMachineAccess().getNameAssignment_1(), "rule__SimpleFiniteStateMachine__NameAssignment_1");
					put(grammarAccess.getSimpleFiniteStateMachineAccess().getStatesAssignment_4(), "rule__SimpleFiniteStateMachine__StatesAssignment_4");
					put(grammarAccess.getSimpleFiniteStateMachineAccess().getStatesAssignment_5(), "rule__SimpleFiniteStateMachine__StatesAssignment_5");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getActionAssignment_4(), "rule__State__ActionAssignment_4");
					put(grammarAccess.getStateAccess().getOutgoingTransitionsAssignment_5(), "rule__State__OutgoingTransitionsAssignment_5");
					put(grammarAccess.getTransitionAccess().getEventAssignment_1(), "rule__Transition__EventAssignment_1");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_3(), "rule__Transition__TargetAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			be.kuleuven.learning.simplefsm.ui.contentassist.antlr.internal.InternalSfsmParser typedParser = (be.kuleuven.learning.simplefsm.ui.contentassist.antlr.internal.InternalSfsmParser) parser;
			typedParser.entryRuleSimpleFiniteStateMachine();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SfsmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SfsmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
